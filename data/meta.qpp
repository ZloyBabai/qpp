metaparam_array basis{
  ordered = no;
  metaparameter freal(type=string)
  {
    required=no;
    synonyms(real);
    values(float,double);
  }
  metaparameter bastype(type=string)
  {
    required=no;
    default=gauss;
    values(gauss,slater,siesta,pw);
  }
  metaparameter angtype(type=string)
  {
    required=no;
    values(spherical,cartesian);
  }
}

metaparam_array atom{
  ordered = no;
  
  metaparameter number(type=int, required = yes);
  metaparameter charge(type=double, required = no);
  metaparameter freeze(type=bool, required = no)
  {
    synonyms(frozen);
  }
  metaparameter mass(type=double, required = no);
  metaparameter alpha(type=double, required = no);
  metaparam_select{
    metaparameter basis(type=string, required=yes);
    metaparam_object (mask=0x81EC0, required=yes);
  }
  metaparameter pseudo(type=string, required=no);
  
  metaparameter cov_rad(type=double,required=no);
  metaparameter vdw_rad(type=double,required=no);
  metaparameter ionic_rad(type=double,required=no);
  
  metaparameter red(type=double,required=no);
  metaparameter green(type=double,required=no);
  metaparameter blue(type=double,required=no);
  metaparameter transparency(type=double,required=no);
}

metaparam_array sphere{
  ordered = yes;
  metaparameter creal(type=string, required=no)
  {
    values(float,double);
    synonyms(real);
  }
  metaparameter R(type=double, required=yes)
  {
    synonyms(r);
  }
  metaparameter center(type=string,required=no)
  {
    default = "";
    metaparam_array{
      ordered=yes;
      metaparameter x(type=double, required=no, default=0.);
      metaparameter y(type=double, required=no, default=0.);
      metaparameter z(type=double, required=no, default=0.);
    }
  }
}

metaparam_array replace
{
  ordered = yes;
  metaparameter geom(type=string,required=no)
  {
    synonyms(where,target,geometry,GEOM,dst,DST,dest,DEST);
    default = "";
  }
  metaparam_select{
    required = yes;
    metaparameter shape(type=string, required=yes);
    metaparam_object shape(mask = 0x100000000);
  }
  metaparameter what(type=string,required=yes);
  metaparameter with(type=string,required=yes);
}

metaparam_array molecule
{
  ordered = yes;
  metaparameter dim(type=int, required = no)
  {
    synonyms(DIM,Dim,dimension,DIMENSION,Dimension);

    value(0){
      synonyms(0d,0D);
    }

    value(1){
      synonyms(1d,1D);
    }

    value(2){
      synonyms(2d,2D);
    }

    value(3){
      synonyms(3d,3D);
    }

    value(4);
    value(5);    
  }

  metaparam_select{

    metaparameter real(type=string, required=no)
    {
      synonyms(REAL);
      values(double,float);
    }

    metaparam_array{
      metaparameter creal(type=string, required=no)
      {
        synonyms(CREAL);
        values(double,float);
      }
      metaparameter freal(type=string, required=no)
      {
        synonyms(FREAL);
        values(double,float);
      }
    }

  }

  metaparameter bastype(type=string, required=no)
  {
    values(gauss,slater,siesta,pw);
  }

}

metaparam_array replicate{
  ordered = yes;

  metaparameter uc(type=string,required=yes)
  {
    synonyms(SRC,source,uc,UC);
  }

  metaparam_select{
    required = yes;
    metaparameter shape(type=string, required=yes);
    metaparam_object shape(mask = 0x100000000);
  }

  metaparameter symm(type=string,required=no)
  {
    synonyms(cell,CELL,vec,vectors,VEC,VECTORS,SYMM,symmetry,SYMMETRY);
  }

  metaparameter mode(type=string,required=no)
  {	   
    synonyms(mode,MODE); 
    value(merge);
    value(exclude);
    value(join)
    {synonyms(sum_charges,sumcharges,summate);}
    value(atomwise)
    {synonyms(by_atoms,byatoms,fromatoms,from_atoms);}
    value(cellwise)
    {synonyms(by_cells,bycells,fromcells,from_cells);}
    value("")
    {
      metaparam_array(ordered=yes)
      {
        metaparameter(type=string,required=yes)
	{
    	  value(merge);
    	  value(exclude);
    	  value(join)
	  {synonyms(sum_charges,sumcharges,summate);}
    	  value(atomwise)
	  {synonyms(by_atoms,byatoms,fromatoms,from_atoms);}
    	  value(cellwise)
	  {synonyms(by_cells,bycells,fromcells,from_cells);}
        }
        metaparameter(type=string,required=yes)
	{
    	  value(merge);
    	  value(exclude);
    	  value(join)
	  {synonyms(sum_charges,sumcharges,summate);}
    	  value(atomwise)
	  {synonyms(by_atoms,byatoms,fromatoms,from_atoms);}
    	  value(cellwise)
	  {synonyms(by_cells,bycells,fromcells,from_cells);}
        }
      }
    }
    default = merge;
  }

  metaparameter close(type=double,required=no,default=0.5);

  metaparameter geom(type=string,required=no)
  {
    synonyms(GEOM,geometry,GEOMETRY,dst,DST,dest,DEST);
    default="";
  }
}

metaparam_array box{
  ordered = yes;
  metaparam_select{
    metaparam_array{
      ordered = yes;
      metaparameter a(type=double, required = yes);
      metaparameter b(type=double, required = yes);
      metaparameter c(type=double, required = yes);
    } 
    metaparam_array{
      ordered = yes;
      metaparameter a(type=string,required=yes)
      {
        values("");
        metaparam_array{
          ordered=yes;
          metaparameter x(type=double, required=yes);
          metaparameter y(type=double, required=yes);
          metaparameter z(type=double, required=yes);
        }
      }
      metaparameter b(type=string,required=yes)
      {
        values("");
        metaparam_array{
          ordered=yes;
          metaparameter x(type=double, required=yes);
          metaparameter y(type=double, required=yes);
          metaparameter z(type=double, required=yes);
        }
      }
      metaparameter c(type=string,required=yes)
      {
        values("");
        metaparam_array{
          ordered=yes;
          metaparameter x(type=double, required=yes);
          metaparameter y(type=double, required=yes);
          metaparameter z(type=double, required=yes);
        }
      }
    }
  }
  metaparameter corner(type=string,required=no){
    values("");
    default="";
    metaparam_array{
      ordered=yes;
      metaparameter x(type=double, required=no, default=0.);
      metaparameter y(type=double, required=no, default=0.);
      metaparameter z(type=double, required=no, default=0.);
    }
  }
}

metaparam_array union{
  ordered=yes;
  metaparam_select{
    required = yes;
    metaparameter shape1(type=string, required=yes);
    metaparam_object shape1(mask = 0x100000000);
  }
  metaparam_select{
    required = yes;
    metaparameter shape2(type=string, required=yes);
    metaparam_object shape2(mask = 0x100000000);
  }
}

metaparam_array intersect{
  ordered=yes;
  metaparam_select{
    required = yes;
    metaparameter shape1(type=string, required=yes);
    metaparam_object shape1(mask = 0x100000000);
  }
  metaparam_select{
    required = yes;
    metaparameter shape2(type=string, required=yes);
    metaparam_object shape2(mask = 0x100000000);
  }
}

metaparam_array subtract{
  ordered=yes;
  metaparam_select{
    required = yes;
    metaparameter shape1(type=string, required=yes);
    metaparam_object shape1(mask = 0x100000000);
  }
  metaparam_select{
    required = yes;
    metaparameter shape2(type=string, required=yes);
    metaparam_object shape2(mask = 0x100000000);
  }
}

metaparam_array shell
{
  ordered=yes;
  metaparam_array
  {
   ordered=yes;
    metaparameter freal(type=string)
    {
      required=no;
      synonyms(real);
      values(float,double);
    }
    metaparameter bastype(type=string)
    {
      required=no;
      default=gauss;
      values(gauss,slater,siesta,pw);
    }
    metaparameter angtype(type=string)
    {
      required=no;
      values(spherical,cartesian);
    }
  }
  metaparam_repeat
  {
    repeat_min=1;
    metaparameter *(type=int)
    {
      required = yes;
      value(0) {  synonyms(s); }
      value(1) {  synonyms(p); }
      value(2) {  synonyms(d); }
      value(3) {  synonyms("f"); }
    }
  }
}


metaparam_array geometry
{
  ordered = no;
  metaparameter dim(type=int, required = no)
  {
    synonyms(DIM,Dim,dimension,DIMENSION,Dimension);

    value(0){
      synonyms(0d,0D);
    }

    value(1){
      synonyms(1d,1D);
    }

    value(2){
      synonyms(2d,2D);
    }

    value(3){
      synonyms(3d,3D);
    }

    value(4);
    value(5);    
  }

  metaparameter creal(type=string, required=no)
  {
    synonyms(real,REAL,CREAL);
    values(double,float);
  }

  metaparameter symm(type=string, required=no)
  {
    synonyms(vectors,cell);
  }

  metaparameter coord(type=string, required=no)
  {
    values(cart,frac);
  }

  metaparameter format(type=string, required=no)
  {
    values("");
    metaparam_repeat
    {
      metaparam_select(required=yes)
      {
        metaparameter(type=string,required=yes)
        {values(atom);}
        metaparameter(type=string,required=yes)
        {values(x);}
        metaparameter(type=string,required=yes)
        {values(y);}
        metaparameter(type=string,required=yes)
        {values(z);}
        metaparameter *(type=string,required=yes)
        {
          values(int,bool,real);
        }
      }
    }
  }  
}

metaparam_array cell
{
  ordered = yes;
  metaparameter a(type=double,required=yes);
  metaparameter b(type=double,required=yes);
  metaparameter c(type=double,required=yes);
  metaparameter alpha(type=double,required=yes);
  metaparameter beta(type=double,required=yes);
  metaparameter gamma(type=double,required=yes);
}

metaparam_array vectors
{
  ordered = yes;
  metaparameter dim(type=int, required = no)
  {
    synonyms(DIM,Dim,dimension,DIMENSION,Dimension);

    value(0){
      synonyms(0d,0D);
    }

    value(1){
      synonyms(1d,1D);
    }

    value(2){
      synonyms(2d,2D);
    }

    value(3){
      synonyms(3d,3D);
    }

    value(4);
    value(5);    
  }

  metaparameter creal(type=string, required=no)
  {
    synonyms(real,REAL,CREAL);
    values(double,float);
  }

}

